// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "referral-rest-api/internal/models"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// ServiceUsers is an autogenerated mock type for the ServiceUsers type
type ServiceUsers struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, email, passwd, refCode
func (_m *ServiceUsers) CreateUser(ctx context.Context, email string, passwd string, refCode string) error {
	ret := _m.Called(ctx, email, passwd, refCode)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, passwd, refCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoggerSetup provides a mock function with given fields: ctx, operation
func (_m *ServiceUsers) LoggerSetup(ctx context.Context, operation string) *slog.Logger {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for LoggerSetup")
	}

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func(context.Context, string) *slog.Logger); ok {
		r0 = rf(ctx, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// LoginUser provides a mock function with given fields: ctx, email, passwd
func (_m *ServiceUsers) LoginUser(ctx context.Context, email string, passwd string) (models.JWT, models.User, error) {
	ret := _m.Called(ctx, email, passwd)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 models.JWT
	var r1 models.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.JWT, models.User, error)); ok {
		return rf(ctx, email, passwd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.JWT); ok {
		r0 = rf(ctx, email, passwd)
	} else {
		r0 = ret.Get(0).(models.JWT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) models.User); ok {
		r1 = rf(ctx, email, passwd)
	} else {
		r1 = ret.Get(1).(models.User)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, email, passwd)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UsersByReferrer provides a mock function with given fields: ctx, userID
func (_m *ServiceUsers) UsersByReferrer(ctx context.Context, userID int64) ([]models.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UsersByReferrer")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceUsers creates a new instance of ServiceUsers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceUsers(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceUsers {
	mock := &ServiceUsers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "referral-rest-api/internal/models"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// ServiceCodes is an autogenerated mock type for the ServiceCodes type
type ServiceCodes struct {
	mock.Mock
}

// CodeByEmail provides a mock function with given fields: ctx, email
func (_m *ServiceCodes) CodeByEmail(ctx context.Context, email string) (models.RefCode, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CodeByEmail")
	}

	var r0 models.RefCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.RefCode, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.RefCode); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.RefCode)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CodeByID provides a mock function with given fields: ctx
func (_m *ServiceCodes) CodeByID(ctx context.Context) (models.RefCode, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CodeByID")
	}

	var r0 models.RefCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.RefCode, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.RefCode); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.RefCode)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCode provides a mock function with given fields: ctx
func (_m *ServiceCodes) CreateCode(ctx context.Context) (models.RefCode, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateCode")
	}

	var r0 models.RefCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.RefCode, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.RefCode); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.RefCode)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCode provides a mock function with given fields: ctx
func (_m *ServiceCodes) DeleteCode(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoggerSetup provides a mock function with given fields: ctx, operation
func (_m *ServiceCodes) LoggerSetup(ctx context.Context, operation string) *slog.Logger {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for LoggerSetup")
	}

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func(context.Context, string) *slog.Logger); ok {
		r0 = rf(ctx, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// NewServiceCodes creates a new instance of ServiceCodes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceCodes(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceCodes {
	mock := &ServiceCodes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
